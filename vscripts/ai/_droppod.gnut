untyped

global function DropPod_Init

global function CreateDropPod
global function LaunchAnimDropPod
global function GetDropPodAnimDuration
global function CreateDropPodSmokeTrail

//const droppod_fireteam_collision = $"models/vehicle/droppod_fireteam/droppod_fireteam_collision.mdl"
global const DROPPOD_MODEL = $"mdl/vehicle/droppod_fireteam/droppod_fireteam.rmdl"

// r5 stuff
global const int AIR_DROP_BAD_PLACE_RADIUS = 1
global function AirdropItems

//  SpawnLootInLootBin( entity lootbin, string ref, int lootI, int lootCount )
//
// 	Point p       = GetLootBinSpawnLocation( lootbin, lootI, lootCount )
// 	LootData data = SURVIVAL_Loot_GetLootDataByRef( ref )
// 	printt(ref, data.netInt)
// 	entity loot   = SpawnGenericLoot( ref, p.origin, p.angles, data.countPerDrop )
// 	loot.RemoveFromAllRealms()
// 	loot.AddToOtherEntitysRealms( lootbin )
// 	SetItemSpawnSource( loot, eSpawnSource.DROPPOD, lootbin )
// 	loot.SetParent( lootbin )
// 	file.lootBinsSpawnedLootMap[lootbin].append( loot )

void function AirdropItems( vector origin, vector angles, array<string> contents, entity fxToStop, string animationName, entity owner, int skin, string sourceWeaponClassName )
{
	printt( "AirdropItems", "origin:", origin, "angles:", angles, "anim:", animationName, "srcWpnClass:", sourceWeaponClassName)

	entity dropPod = CreateDropPod( origin, angles, sourceWeaponClassName )

	dropPod.SetSkin( skin )

	waitthread LaunchAnimDropPod( dropPod, animationName, OriginToGround( origin ), angles )

	InitDropPod( dropPod )

	for(int i=0; i < 3; ++i)
	{
		SpawnLootInDropPod( dropPod, "mp_weapon_r97", i, 3 )
	}


}

void function SpawnLootInDropPod( entity dropPod, string ref, int lootI, int lootCount )
{
	Point p = GetDropPodSpawnLocation( dropPod, lootI, lootCount )

	LootData data = SURVIVAL_Loot_GetLootDataByRef( ref )

	entity loot = SpawnGenericLoot( ref, p.origin, p.angles, data.countPerDrop )

	loot.RemoveFromAllRealms()
	loot.AddToOtherEntitysRealms( dropPod )
	SetItemSpawnSource( loot, eSpawnSource.DROPPOD, dropPod )
	loot.SetParent( dropPod )

}

void function InitDropPod( entity dropPod )
{

	// var dataTable = GetDataTable( $"datatable/survival_loot.rpak" )
	// int numRows = GetDatatableRowCount( dataTable )

	dropPod.e.isOpen = false
	dropPod.e.isBusy = false
	dropPod.e.hasBeenOpened = false
	dropPod.AllowMantle()
	dropPod.SetForceVisibleInPhaseShift( true )
	dropPod.SetUsable()
	dropPod.SetFadeDistance( 100000 )
	dropPod.AddUsableValue( USABLE_CUSTOM_HINTS | USABLE_BY_OWNER | USABLE_BY_PILOTS | USABLE_BY_ENEMIES )
	//dropPod.AddUsableValue( USABLE_BY_OWNER | USABLE_BY_PILOTS | USABLE_BY_ENEMIES )
	dropPod.SetUsablePriority( USABLE_PRIORITY_LOW )
	AddCallback_OnUseEntity( dropPod, OnDropPodUse )

	SetCallback_CanUseEntityCallback( dropPod, DropPod_CanUse )

	// if ( SURVIVAL_DEBUG_LOOT_BINS )
	// {
	// 	DebugDrawLine( lootbin.GetOrigin(), lootbin.GetOrigin() + <0, 0, 1000>, 255, 255, 255, true, 100.0 )
	// }
	// array<string> items

	// for( int i=0; i < RandomIntRange(2, 4); i++ )
	// {
	// 	items.append( GetDataTableString( dataTable, RandomInt( numRows ), GetDataTableColumnByName( dataTable, "ref" ) ) )
	// }
	
	// AddMultipleLootItemsToLootBin(lootbin, items)
	// AddMultipleLootItemsToLootBin(lootbin, ["mp_weapon_vinson", "mp_weapon_r97", "health_pickup_combo_full", "mp_weapon_thermite_grenade", "backpack_pickup_lv3", "armor_pickup_lv1"])
}

void function OnDropPodUse( entity dropPod, entity player, int useInputFlags )
{
	if ( (useInputFlags & USE_INPUT_DEFAULT) == 0 )
		return

	thread HandleDropPodUse( dropPod, player )
}
void function HandleDropPodUse( entity dropPod, entity player )
{
	dropPod.EndSignal( "OnDestroy" )

	if ( dropPod.Anim_IsActive() )
		return

	EmitSoundOnEntity( dropPod, SOUND_LOOT_BIN_OPEN )

	if ( !DropPod_IsOpen( dropPod ) )
		thread DropPod_PlayOpenSequence( dropPod, player )
	if ( IsValid( player ) )
		TrackingVision_CreatePOI( eTrackingVisionNetworkedPOITypes.PLAYER_LOOTBIN_USED, dropPod, dropPod.GetWorldSpaceCenter(), player.GetTeam(), player )
}

void function DropPod_PlayOpenSequence( entity dropPod, entity player )
{
	dropPod.EndSignal( "OnDestroy" )

	// CleanUpPermanentsParentedToLootbin( lootbin )

	GradeFlagsSet( dropPod, eGradeFlags.IS_BUSY )

	if ( !dropPod.e.hasBeenOpened )
	{
		dropPod.e.hasBeenOpened = true

		StopSoundOnEntity( dropPod, SOUND_LOOT_BIN_IDLE )

		int lootIndex             = 0

		// todo: use this instead of setting loot when droppod lands
		// array<string> lootToSpawn = GetLootBinContents( lootbin )

		// foreach ( ref in lootToSpawn )
		// {
		// 	SpawnLootInLootBin( lootbin, ref, lootIndex, lootToSpawn.len() )
		// 	lootIndex++
		// }

		// lootToSpawn.clear()
	}

	GradeFlagsSet( dropPod, eGradeFlags.IS_OPEN )

	entity dropPodParent = dropPod.GetParent()
	if ( IsValid( dropPodParent ) )
		waitthread PlayAnim( dropPod, "droppod_loot_opening", dropPodParent, "ref" )
	else
		waitthread PlayAnim( dropPod, "droppod_loot_opening" )

	GradeFlagsClear( dropPod, eGradeFlags.IS_BUSY )
}

bool function DropPod_IsOpen( entity dropPod )
{
	if ( GradeFlagsHas( dropPod, eGradeFlags.IS_OPEN ) )
		return true
	return false
}

bool function DropPod_CanUse( entity player, entity dropPod )
{
	if ( player.GetWeaponDisableFlags() == WEAPON_DISABLE_FLAGS_ALL )
		return false

	if ( Bleedout_IsBleedingOut( player ) )
		return false

	// if ( LootBin_IsBusy( dropPod ) )
	// 	return false

	if ( DropPod_IsOpen( dropPod ) )
		return false

	return true
}



Point function GetDropPodSpawnLocation( entity dropPod, int lootI, int lootCount )
{
	float y    = Graph( lootI + 1, 0, lootCount + 1, -51, 51 )
	vector pos = dropPod.GetOrigin() + RotateVector( <14, y, 33>, dropPod.GetAngles() )
	vector ang = AnglesCompose( dropPod.GetAngles(), <10, 0, 0> )

	Point p
	p.origin = pos
	p.angles = ang
	return p
}

function DropPod_Init()
{
	PrecacheModel( DROPPOD_MODEL )

	RegisterSignal( "OnLaunch" )
	RegisterSignal( "OnImpact" )

	//PrecacheModel( DP_COLL_MODEL )

	PrecacheEffect( $"droppod_trail" )
	PrecacheEffect( $"droppod_impact" )
}


function GetDropPodAnimDuration()
{
	// hack seems bad to spawn an ent to get this info
	entity dropPod = CreateDropPod()

	local animDuration = dropPod.GetSequenceDuration( "pod_testpath" )
	dropPod.Destroy()

	return animDuration
}

function LaunchAnimDropPod( entity dropPod, string anim, vector targetOrigin, vector targetAngles )
{
	dropPod.EndSignal( "OnDestroy" )
	dropPod.EnableRenderAlways()

	dropPod.s.launchAnim <- anim

	int team = dropPod.GetTeam()

	entity ref = CreateOwnedScriptMover( dropPod )
    ref.SetOrigin( targetOrigin )
    ref.SetAngles( targetAngles )

	OnThreadEnd(
		function () : ( dropPod, ref )
		{
			if ( IsValid( dropPod ) )
			{
				dropPod.ClearParent()
			}

			if ( IsValid( ref ) )
				ref.Kill_Deprecated_UseDestroyInstead()
		}
	)

	local e = {}
	e.targetOrigin <- targetOrigin
	e.targetAngles <- targetAngles

	AddAnimEvent( dropPod, "OnImpact", DropPodOnImpactFXAndShake, e )
	EmitSoundOnEntity( dropPod, "spectre_drop_pod" )

	FirstPersonSequenceStruct sequence
	sequence.thirdPersonAnim 		= anim

	sequence.blendTime 			= 0.0
	sequence.attachment 		= "ref"
	sequence.useAnimatedRefAttachment		= true
	//DrawArrow( ref.GetOrigin(), ref.GetAngles(), 5, 100 )
	waitthread FirstPersonSequence( sequence, dropPod, ref )
	dropPod.DisableRenderAlways()
//	WaitFrame()
}

function CheckPlayersIntersectingPod( pod, targetOrigin )
{
	array<entity> playerList = GetPlayerArray()

	// Multiplying the bounds by 1.42 to ensure this encloses the droppod when it's rotated 45 degrees
	local mins = pod.GetBoundingMins() * 1.42 + targetOrigin
	local maxs = pod.GetBoundingMaxs() * 1.42 + targetOrigin
	local safeRadiusSqr = 250 * 250

	foreach ( player in playerList )
	{
		local playerOrigin = player.GetOrigin()

		if ( DistanceSqr( targetOrigin, playerOrigin ) > safeRadiusSqr )
			continue

		local playerMins = player.GetBoundingMins() + playerOrigin
		local playerMaxs = player.GetBoundingMaxs() + playerOrigin

		if ( BoxIntersectsBox( mins, maxs, playerMins, playerMaxs ) )
			return true
	}

	return false
}

entity function CreateDropPod( vector ornull origin = null, vector ornull angles = null, string sourceWeaponClassName = "" )
{
	entity prop_dynamic = CreateEntity( "prop_dynamic" )

	// if( sourceWeaponClassName == "mp_ability_care_package" )
	// {
	// 	prop_dynamic.SetValueForModelKey( CARE_PACKAGE_AIRDROP_MODEL )
	// }
	// else {
	// 	prop_dynamic.SetValueForModelKey( DROPPOD_MODEL )
	// }

	prop_dynamic.SetValueForModelKey( CARE_PACKAGE_AIRDROP_MODEL )

	prop_dynamic.kv.contents = int( prop_dynamic.kv.contents ) & ~CONTENTS_TITANCLIP
	prop_dynamic.kv.fadedist = -1
	prop_dynamic.kv.renderamt = 255
	prop_dynamic.kv.rendercolor = "255 255 255"
	prop_dynamic.kv.solid = 6 // 0 = no collision, 2 = bounding box, 6 = use vPhysics, 8 = hitboxes only
	if ( origin )
	{
		prop_dynamic.SetOrigin( expect vector( origin ) )
		if ( angles )
			prop_dynamic.SetAngles( expect vector( angles ) )
	}
	DispatchSpawn( prop_dynamic )

	return prop_dynamic
}

void function PushPlayerAndCreateDropPodCollision( entity pod, vector targetOrigin )
{
	pod.EndSignal( "OnDestroy" )

	entity point_push = CreateEntity( "point_push" )
	point_push.kv.spawnflags = 8
	point_push.kv.enabled = 1
	point_push.kv.magnitude = 140.0 * 0.75 //Compensate for reduced player gravity to match R1
	point_push.kv.radius = 192.0
	point_push.SetOrigin( targetOrigin + Vector( 0.0, 0.0, 32.0 ) )
	DispatchSpawn( point_push )

	OnThreadEnd(
		function() : ( point_push )
		{
			point_push.Fire( "Kill", "", 0.0 )
		}
	)

	while ( CheckPlayersIntersectingPod( pod, targetOrigin ) )
		wait( 0.1 )

	pod.Solid()
}

function DropPodOnImpactFX( droppod, e )
{
	PlayImpactFXTable( expect vector( e.targetOrigin ), expect entity( droppod ), HOTDROP_IMPACT_FX_TABLE )
}

void function DropPodOnImpactFXAndShake( entity droppod )
{
	var e = GetOptionalAnimEventVar( droppod, "OnImpact" )
	DropPodOnImpactFX( droppod, e )
	CreateShake( expect vector( e.targetOrigin ), 7, 0.15, 1.75, 768 )

	// 1 - No Damage - Only Force
	// 2 - Push players
	// 8 - Test LOS before pushing
	local flags = 2 // 11
	local impactOrigin = e.targetOrigin + Vector( 0,0,10 )
	local impactRadius = 192
	thread PushPlayerAndCreateDropPodCollision( droppod, expect vector( e.targetOrigin ) )
}


function CreateDropPodSmokeTrail( pod )
{
	entity smokeTrail = CreateEntity( "info_particle_system" )
	smokeTrail.SetValueForEffectNameKey( $"droppod_trail" )
	smokeTrail.kv.start_active = 0
	DispatchSpawn( smokeTrail )

	smokeTrail.SetOrigin( pod.GetOrigin() + Vector( 0, 0, 152 ) )
	smokeTrail.SetParent( pod )

	return smokeTrail
}

